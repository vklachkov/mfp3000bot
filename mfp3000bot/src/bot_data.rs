use once_cell::sync::Lazy;
use teloxide::types::{InlineKeyboardButton, InlineKeyboardMarkup};

pub const UNALLOWED_USER: &str =
    "üëÄ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É Telegram –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞";

pub const HELLO: &str = "\
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!

–ß—Ç–æ–±—ã —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ DOCX —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç.
    
–î–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /scan –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.

–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"–ú–µ–Ω—é\" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.
";

pub const HELP: &str = "\
üñ®Ô∏è –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–º–∞—à–Ω–µ–º—É –ø—Ä–∏–Ω—Ç–µ—Ä—É —á–µ—Ä–µ–∑ Telegram.

–ß—Ç–æ–±—ã —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ DOCX —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç.

–î–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /scan –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.";

pub const BOT_BUSY: &str =
    "üïì –ë–æ—Ç –∑–∞–Ω—è—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.";

pub const PRINT_COMMAND_TEXT: &str =
    "üñ®Ô∏è –î–ª—è –ø–µ—á–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ DOCX —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç!";

pub const NO_PRINTER_IN_CFG: &str =
    "üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ. –ò–∑–º–µ–Ω–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!";

pub const UNSUPPORTED_DOCUMENT: &str = "üòì –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.";

pub const SUCCESSFUL_PRINT: &dyn Fn(&str) -> String =
    &|doc_name| format!("üìÑ –î–æ–∫—É–º–µ–Ω—Ç \"{doc_name}\" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å!");

pub const FAILED_TO_PRINT: &dyn Fn(&str) -> String =
    &|doc_name| format!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ \"{doc_name}\"!");

pub const SELECT_SCAN_MODE: &str = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ";

#[rustfmt::skip]
pub static SCAN_MODE_BUTTONS: Lazy<[(&str, (usize, &str)); 2]> = Lazy::new(|| {
    [
        (ScanMode::SinglePage.into(), (0, "üìÑ –û–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞")),
        (ScanMode::Document.into(), (1, "üìï –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")),
    ]
});

#[derive(Clone, Copy, strum::Display, strum::IntoStaticStr, strum::EnumString)]
pub enum ScanMode {
    SinglePage,
    Document,
}

pub const SELECT_SCAN_ACTION: &str = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ";

#[rustfmt::skip]
pub static SCAN_ACTIONS_BUTTONS: Lazy<[(&str, (usize, &str)); 3]> = Lazy::new(|| {
    [
        (ScanAction::Cancel.into(), (0, "‚õî –ü—Ä–µ—Ä–≤–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")),
        (ScanAction::Scan.into(), (1, "üöÄ –ù–∞—á–∞—Ç—å")),
        (ScanAction::Preview.into(), (1, "üëÄ –ü—Ä–µ–≤—å—é")),
    ]
});

pub const SELECT_DOCUMENT_ACTION: &dyn Fn(usize) -> String =
    &|count| format!("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {count}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ");

#[rustfmt::skip]
pub static DOCUMENT_ACTION_BUTTONS: Lazy<[(&str, (usize, &str)); 4]> = Lazy::new(|| {
    [
        (ScanAction::Cancel.into(), (0, "‚õî –ü—Ä–µ—Ä–≤–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")),
        (ScanAction::Scan.into(), (1, "üöÄ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")),
        (ScanAction::Preview.into(), (1, "üëÄ –ü—Ä–µ–≤—å—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã")),
        (ScanAction::Done.into(), (2, "üì• –ó–∞–≤–µ—Ä—à–∏—Ç—å")),
    ]
});

#[derive(Clone, Copy, strum::Display, strum::IntoStaticStr, strum::EnumString)]
pub enum ScanAction {
    Done,
    Scan,
    Preview,
    Cancel,
}

pub const SCAN_PREPAIR: &str = "‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é...";

pub const SCAN_PROGRESS: &dyn Fn(f64) -> String =
    &|progress| format!("‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {progress:.0}%");

pub const STOP_SCANNER: &str = "‚öôÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞...";

pub const SCAN_COMPRESS_JPEG: &str = "‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ JPEG...";

pub const SCAN_PREVIEW_DONE: &str = "üëÄ –ü—Ä–µ–≤—å—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã:";

pub const SINGLE_PAGE_SCAN_RESULT: &str = "üìÑ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:";

pub const SCAN_ERROR: &str = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è";

pub const SCAN_PREPARE_PDF: &str = "‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞...";

pub const MULTIPAGE_SCAN_RESULT: &str = "üìï –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:";

#[rustfmt::skip]
pub static SCAN_CANCEL: Lazy<[(&str, (usize, &str)); 1]> = Lazy::new(|| {
    [
        (ScanCancel::Forget.into(), (0, "‚õî –ü—Ä–µ—Ä–≤–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")),
    ]
});

pub const SCAN_CANCELLED: &str = "üëç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ";

pub const SCAN_CANCEL_CONFIRMATION: &str = "‚ö†Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç?";

#[rustfmt::skip]
pub static SCAN_CANCEL_CONFIRM_BUTTONS: Lazy<[(&str, (usize, &str)); 2]> = Lazy::new(|| {
    [
        (ScanCancel::Forget.into(), (0, "üóëÔ∏è –î–∞")),
        (ScanCancel::Cancel.into(), (0, "‚Ü©Ô∏è –ù–µ—Ç")),
    ]
});

#[derive(Clone, Copy, strum::Display, strum::IntoStaticStr, strum::EnumString)]
pub enum ScanCancel {
    Forget,
    Cancel,
}

pub const RENAME_DOCUMENT: &str = "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:";

#[rustfmt::skip]
pub static RENAME_DOCUMENT_BUTTONS: Lazy<[(&str, (usize, &str)); 1]> = Lazy::new(|| {
    [
        ("-", (0, "üì• –û—Å—Ç–∞–≤–∏—Ç—å –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é")),
    ]
});

pub const INVALID_DOCUMENT_NAME: &str = "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:";

pub const DEFAULT_SINGLE_PAGE_NAME: &str = "–°—Ç—Ä–∞–Ω–∏—Ü–∞";

pub const DEFAULT_DOC_NAME: &str = "–î–æ–∫—É–º–µ–Ω—Ç";

pub fn buttons_to_inline_keyboard(buttons: &[(&str, (usize, &str))]) -> InlineKeyboardMarkup {
    InlineKeyboardMarkup::new((0..buttons.len()).map(|idx| {
        buttons
            .iter()
            .filter(move |(_, (row, _))| *row == idx)
            .map(|(id, (_, text))| InlineKeyboardButton::callback(*text, *id))
    }))
}
