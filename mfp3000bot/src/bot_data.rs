use once_cell::sync::Lazy;
use teloxide::types::{InlineKeyboardButton, InlineKeyboardMarkup};

pub const PRINT_COMMAND_TEXT: &str =
    "üñ®Ô∏è –î–ª—è –ø–µ—á–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ DOCX —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç!";

pub const NO_PRINTER_IN_CFG: &str =
    "üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ. –ò–∑–º–µ–Ω–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!";

pub const SUCCESSFUL_PRINT: &dyn Fn(&str) -> String =
    &|doc_name| format!("üìÑ –î–æ–∫—É–º–µ–Ω—Ç \"{doc_name}\" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å!");

pub const FAILED_TO_PRINT: &dyn Fn(&str) -> String =
    &|doc_name| format!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ \"{doc_name}\"!");

pub const SELECT_SCAN_MODE: &str = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ";

#[rustfmt::skip]
pub static SCAN_MODE_BUTTONS: Lazy<[(&str, (usize, &str)); 2]> = Lazy::new(|| {
    [
        (ScanMode::SinglePage.into(), (0, "üìÑ –û–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞")),
        (ScanMode::Document.into(), (1, "üìï –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")),
    ]
});

#[derive(Clone, Copy, strum::Display, strum::IntoStaticStr, strum::EnumString)]
pub enum ScanMode {
    SinglePage,
    Document,
}

pub const SELECT_SCAN_ACTION: &str = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ";

#[rustfmt::skip]
pub static SCAN_ACTIONS_BUTTONS: Lazy<[(&str, (usize, &str)); 3]> = Lazy::new(|| {
    [
        (ScanAction::Cancel.into(), (0, "‚õî –ü—Ä–µ—Ä–≤–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")),
        (ScanAction::Scan.into(), (1, "üöÄ –ù–∞—á–∞—Ç—å")),
        (ScanAction::Preview.into(), (1, "üëÄ –ü—Ä–µ–≤—å—é")),
    ]
});

pub const MULTIPAGE_SELECT_SCAN_ACTION: &dyn Fn(usize) -> String =
    &|count| format!("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {count}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ");

#[rustfmt::skip]
pub static MULTIPAGE_SCAN_ACTIONS_BUTTONS: Lazy<[(&str, (usize, &str)); 4]> = Lazy::new(|| {
    [
        (ScanAction::Cancel.into(), (0, "‚õî –ü—Ä–µ—Ä–≤–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")),
        (ScanAction::Scan.into(), (1, "üöÄ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")),
        (ScanAction::Preview.into(), (1, "üëÄ –ü—Ä–µ–≤—å—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã")),
        (ScanAction::Cancel.into(), (2, "üì• –ó–∞–≤–µ—Ä—à–∏—Ç—å")),
    ]
});

#[derive(Clone, Copy, strum::Display, strum::IntoStaticStr, strum::EnumString)]
pub enum ScanAction {
    Done,
    Scan,
    Preview,
    Cancel,
}

pub const SCAN_PREPAIR: &str = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é...";

pub const SCAN_PROGRESS: &dyn Fn(u8) -> String =
    &|progress| format!("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {progress}%");

pub const SCAN_PREVIEW_DONE: &str = "–ü—Ä–µ–≤—å—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã:";

pub const SINGLE_PAGE_SCAN_RESULT: &str = "–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:";

pub const SCAN_ERROR: &str = "–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è";

#[rustfmt::skip]
pub static SCAN_CANCEL: Lazy<[(&str, (usize, &str)); 1]> = Lazy::new(|| {
    [
        (ScanAction::Cancel.into(), (0, "‚õî –ü—Ä–µ—Ä–≤–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")),
    ]
});

pub const SCAN_CANCELLED: &str = "üòî –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ";

pub const UNIMPLEMENTED: &str = "ü•∫ –ü—Ä–æ—Å—Ç–∏—Ç–µ, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞!";

pub const INVALID_STATE: &str = "üêû –í—ã –Ω–∞—à–ª–∏ –±–∞–≥! –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏";

pub fn buttons_to_inline_keyboard(buttons: &[(&str, (usize, &str))]) -> InlineKeyboardMarkup {
    let k = InlineKeyboardMarkup::new((0..buttons.len()).map(|idx| {
        buttons
            .iter()
            .filter(move |(_, (row, _))| *row == idx)
            .map(|(id, (_, text))| InlineKeyboardButton::callback(*text, *id))
    }));

    println!("–ö–ù–û–ü–ö–ò {k:?}");

    k
}
